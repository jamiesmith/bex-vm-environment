#
# COPYRIGHT
#	Copyright 2008-2014 TIBCO Software Inc. ALL RIGHTS RESERVED.
#	TIBCO Software Inc. Confidential Information
#
# Description
#	AST init script
#
# History
#       $Revision: 1.1.2.12 $ $Date: 2014/08/21 02:37:01 $
#       $Source: /opt/cvsroot/sdk/application/generic/fluency/Attic/fluency-server.env,v $
#
set -e

export SW_HOME=${SW_HOME:=/opt/kabira/kis}

. $SW_HOME/distrib/kabira/kts/include/switch.env

#
# defaults - any of these may be overridden 
#
BuildType=AUTOMATIC
MemorySize=512
MemoryType=file
AdminPortBase=2000
# Amount of time to sleep in between installing nodes
# (used to keep multiple nodes from having the same distribution timestamp)
NodeInstallSleepTime=0
domainmanager_memorysize=512
VMWare=
# Default to empty broadcastHost (broadcast on all interfaces)
BroadcastHost=
WebServerPort=8080

#
#
#
ProgName=${0##*/}

function Usage
{
	print -u2 "Usage: $ProgName [-x]" \
		"{install|start|stop|restart|remove|status}"
	exit 1
}

function Die
{
	print "$ProgName: $*"
	exit 1
}

function Initialize
{
	set -e

	domainmanager_adminport=$(FindFreePort $AdminPortBase)

	typeset -i adminport
	
	let adminport=$domainmanager_adminport+1

	#
	# Build NodeList and ${node} variables from Node array
	#
	for nodespec in "${Node[@]}"
	do
		nodename=${nodespec%% *}

		[[ "$nodename" == *=* ]] &&
			Die "Invalid node syntax." \
				"Node name should be specified first"

		NodeList="$NodeList $nodename"

		adminport=$(FindFreePort $adminport)

		#
		# set node defaults
		#
		eval ${nodename}_memorysize=$MemorySize
		eval ${nodename}_memorytype=$MemoryType
		eval ${nodename}_application=$Application
		eval ${nodename}_adminport=$adminport

		let adminport=$adminport+1

		#
		# parse individual fields and set variables
		#
		typeset options="${nodespec#$nodename}"
		typeset valid="memorysize application adminport memorytype"

		for option in $options
		do
			name=${option%=*}
			value=${option#*=}

			typeset found=0
			for v in $valid
			do
				if [ $name = $v ]
				then
					found=1
					break
				fi
			done

			[[ $found -eq 1 ]] ||
				Die "invalid node option $name." \
					"Valid options are {$valid}"

			eval ${nodename}_$name=$value
		done
	done

	typeset -i nodeagentport

	let nodeagentport=$adminport+1

	for node in $NodeList
	do
		nodeagentport=$(FindFreePort $nodeagentport)

		eval ${node}_nodeagentport=$nodeagentport
		let nodeagentport=$nodeagentport+1
	done
		

	domainmanager_adminport=$(FindFreePort $domainmanager_adminport)

	#
	# initialize global variables affected by configuration
	#
	Run=$InstallPath/${Application##*/}
	LogFileDir=$Run/logs
	LogFile=$LogFileDir/console.log
	SwitchAdmin=$SW_HOME/distrib/kabira/bin/administrator
	test -x $SwitchAdmin || \
		SwitchAdmin=$SW_HOME/distrib/kabira/devbin/administrator
	SWNode=$SW_HOME/distrib/kabira/scripts/swnode

	test -x $SwitchAdmin || exit 0

	AllNodes="domainmanager $NodeList"

	distributionport=$(FindFreePort 7000)
	broadcastport=$(FindFreePort)
	broadcasthost=$BroadcastHost

	return 0
}


#
#       Function that logs messages to log file and outputs to stdout
#
function Log
{
	typeset opts

	message="$*"

	if [ -f $LogFile ]
	then
		print $opts "$message" | tee -a $LogFile
	else
		print $opts "$message"
	fi

	return 0
}

#
#       Function that logs messages to log file and outputs to stdout
#
function LogFatal
{
	Log "FATAL: $*"
	exit 1
}

#
#       Function that adds timestamp to console file
#
function Timestamp
{
	print "============================" >>$LogFile
	date >>$LogFile
	print "============================" >>$LogFile

	return 0
}

#
#       Function that validates that the server is installed
#
function CheckInstalled
{
	test -d $Run/logs ||
    		LogFatal "$ProductName Not installed"

	return 0
}

#
#       Function that creates working directories
#
function CreateDirectories
{
	set -e

	for dir in nodes logs configuration deploy
	do
		mkdir -p $Run/$dir
	done

	chmod 777 $Run/deploy

	>>$LogFile

	chmod 666 $LogFile

	return 0
}

#
#       Function to update BuildType variable
#
function SetBuildType
{
	set -e

	path=$SW_HOME/distrib/kabira/component/kis

	if [ ! -d $path ]
	then
		LogFatal "Cannot find component directory at $path"
	fi

	if [ "$BuildType" = "AUTOMATIC" ]
	then
		if [ -d $path/devlib ]
		then
			BuildType=DEVELOPMENT
		else
			BuildType=PRODUCTION
		fi
		export BuildType
	fi

	return 0
}

#
# Get admin ports for all nodes
#
function GetAdminPorts
{
	set -e

	for node in $AllNodes 
	do
		eval ${node}_adminport=$($SwitchAdmin getadminport node \
				installpath=$Run/nodes/$node \
				2>>$LogFile)
	done

	return 0
}

#
# Print admin ports for all nodes
#
function PrintAdminPorts
{
	set -e

	for node in $AllNodes 
	do
		print $node $($SwitchAdmin getadminport node \
				installpath=$Run/nodes/$node \
				2>>$LogFile)
	done

	return 0
}

function BuildNodeConfiguration
{
	set -e

	typeset first=true

	for node in $NodeList
	do
		adminport=$(eval print '$'${node}_adminport)
		nodeagentport=$(eval print '$'${node}_nodeagentport)
		nodeapp=$(eval print '$'${node}_application)

		test $first || print -n ", "
		first=
		print -n "{ name=\"$node\"; " \
			"host=\"localhost\"; " \
			"port=$adminport; " \
			"application=\"$nodeapp\"; " \
			"description=\"Application Node\"; " \
			"groups = { }; " \
			"nodeAgentAddress=\"TCP:localhost:$nodeagentport\"; }"
	done

	return 0
}

#
# Install management node.  Update the event logger configuration and
# configure the guest principal.
#
function InstallDomainManager
{
	set -e

	typeset kdmconfig=$Run/configuration/domainmanager/node/kabira/kdm
	typeset vmconfig=$SW_HOME/distrib/kabira/ast/vmware-config
	typeset fluencyconfig=$SW_HOME/distrib/kabira/ast/config

	domainmanager_adminport=$(FindFreePort $domainmanager_adminport)

	$SwitchAdmin install node \
		application=kabira/kdm \
		adminport=$domainmanager_adminport \
		memorysize=$domainmanager_memorysize \
		nodename=domainmanager \
		buildtype=$BuildType \
		installpath=$Run/nodes/domainmanager \
		deploydirectories=$Run/deploy \
		configpath=$Run/configuration/domainmanager

	cp $fluencyconfig/90-applicationconfig/eventlogger.kcs \
		$kdmconfig/90-applicationconfig

	rm -f $kdmconfig/90-applicationconfig/90-kdm.kcs

	sed "s|.*NODE_CONFIGURATION|$(BuildNodeConfiguration)|" \
		< $vmconfig/kdm.kcs \
		> $kdmconfig/90-applicationconfig/kdm.kcs

	#
	#	Remove default domainmanager configuration and explicitly
	#	configure to use the local IP adddress.  We do this to allow
	#	this server to be accessed by an IP address instead of
	#	a host name
	#
	rm -f $kdmconfig/90-applicationconfig/kabman.kcs

	WebServerPort=$(FindFreePort $WebServerPort)

	sed "s|IPADDRESS|$IP|;s|PORTNUMBER|$WebServerPort|" \
		< $vmconfig/km.kcs \
		> $kdmconfig/90-applicationconfig/km.kcs

	print "Node domainmanager install succeeded"

	return 0
}

#
# Install the nodes
#
function Install
{
	set -e

	CreateDirectories
	SetBuildType

	Timestamp
	Log "Installing $ProductName nodes... "

	#
	# If domainmanager node is installed, assume all nodes are installed
	#
	test -d $Run/nodes/domainmanager && return 0

	InstallDomainManager >$LogFileDir/domainmanager.log 2>&1 &

	typeset vmconfig=$SW_HOME/distrib/kabira/ast/vmware-config
	typeset port

	for node in $NodeList
	do
		#
		# check to see if the node is already installed
		#
		test -d $Run/nodes/$node && continue

		typeset logfile=$LogFileDir/$node.log
		typeset vmconfig=$SW_HOME/distrib/kabira/ast/vmware-config
		typeset appconfig=$Run/configuration/$node/node/$Application

		{
		    $SwitchAdmin install node \
			adminport=$(eval print '$'${node}_adminport) \
			memorysize=$(eval print '$'${node}_memorysize) \
			memorytype=$(eval print '$'${node}_memorytype) \
			nodename=$node \
			buildtype=$BuildType \
			installpath=$Run/nodes/$node \
			deploydirectories=$Run/deploy \
			configpath=$Run/configuration/$node

			mkdir -p $appconfig/00-security
			mkdir -p $appconfig/90-applicationconfig

			cp $vmconfig/node.kcs \
				$appconfig/90-applicationconfig/node.kcs

			port=$(eval print '$'${node}_nodeagentport)

			sed "s|NODEAGENT_PORT|$port|" \
				< $vmconfig/nodeagent.kcs \
				> $appconfig/90-applicationconfig/nodeagent.kcs

			# Replace the default distribution configuration with
			# one that uses non-default port numbers
			#
			rm -f $appconfig/90-applicationconfig/distribution.kcs
			sed "s|BROADCASTPORT|$broadcastport|;
				s|BROADCASTHOST|$broadcasthost|;
				s|DISTRIBUTIONPORT|$distributionport|" \
			    < $vmconfig/distribution.kcs \
			    > $appconfig/90-applicationconfig/distribution.kcs

			print "Node $node install succeeded"

		} >>$logfile 2>&1 &

		sleep $NodeInstallSleepTime
	done

	wait

	for node in $AllNodes
	do
		typeset logfile=$LogFileDir/$node.log

		set +e
		grep "Node $node install succeeded" $logfile > /dev/null 2>&1
		if [ $? -ne 0 ]
		then
			LogFatal "\nnode $node install failed." \
				"See $node.log for details"
		fi
		set -e

		typeset appconfig=$Run/configuration/$node/node/kabira/ast
		appconfig=$appconfig/90-applicationconfig

		mkdir -p $appconfig
	done

	Timestamp

	return 0
}

function GenerateWelcomePage
{
	set -e

	test $VMWare || return 0

	typeset htdocs=$Run/nodes/domainmanager/apache/htdocs
	typeset ManagerURL="http://$IP"
	typeset DevZoneURL="http://devzone.tibco.com"
	typeset BuildId
	typeset Version

	BuildId=$(cut -d "(" -f 2 ${VersionFile})
	BuildId=$(echo ${BuildId} | sed -n "s|build ||p")
	BuildId=$(echo ${BuildId} | sed -n "s|)||p")

	Line=$(cut -d "(" -f 1 ${VersionFile})
	for Version in echo ${Line}
	do
		continue
	done

	test $WebServerPort = 80 ||
		ManagerURL=$ManagerURL:$WebServerPort

	#
	# generate welcome page
	#
	typeset htmlsource=$SW_HOME/distrib/$Application/html
	
	#
	# copy non-html files into htdocs
	#
	cp -f $htmlsource/!(*.html) $htdocs

	#
	# substitute variables into html files, and copy into htdocs
	#
	for file in $htmlsource/*.html
	do
		sed "s|\$IP|$IP|g;
			s|\$ManagerURL|$ManagerURL|g;
			s|\$DevZoneURL|$DevZoneURL|g;
			s|\$Version|$Version|g;
			s|\$BuildId|$BuildId|g;
			s|\$ManagerAdminPort|$domainmanager_adminport|g;" \
		< $file \
		>$htdocs/${file##*/}
	done

	#
	# copy documentation into htdocs
	#
	typeset docs=$Distrib/kis/documentation

	if [ -d $docs ]
	then
		source=$docs
		dest=$htdocs/fluency-docs

		mkdir -p $dest
		gtar -C $source -chf - --mode a+w . | gtar -C $dest -xf -
	fi

	#
	# create link from /opt/kabira/html to domainmanager directory
	#
	rm -f /opt/kabira/html
	ln -s $Run/nodes/domainmanager/apache/htdocs /opt/kabira/html

	return 0
}

function PublishServerInfo
{
	set -e

	test $VMWare || return 0

	typeset serverinfo=$Share/server-info

	test -d $serverinfo || return 0

	print "$IP" >$serverinfo/ip-address

	return 0
}

#
# Install (if needed) and start all nodes
#
function Start
{
	set -e

	Install
	GetAdminPorts

	Timestamp

	Log "Starting $ProductName nodes..."


	{
		$SwitchAdmin adminport=$domainmanager_adminport start node &&

		print "Node domainmanager start succeeded"
	} >>$LogFileDir/domainmanager.log 2>&1 &

	typeset adminport

	for node in $NodeList
	do
		logfile=$LogFileDir/$node.log
		adminport=$(eval print '$'${node}_adminport)

		{
			$SwitchAdmin adminport=$adminport start node

			print "Node $node start succeeded"

		} >>$logfile 2>&1 &
	done

	wait

	for node in $AllNodes
	do
		logfile=$LogFileDir/$node.log

		set +e
		grep "Node $node start succeeded" $logfile  > /dev/null 2>&1
		if [ $? -ne 0 ]
		then
			LogFatal "\nNode $node start failed. " \
				"See $node.log for details"
		fi
		set -e
	done

	for node in $NodeList
	do
		$SwitchAdmin adminport=$domainmanager_adminport \
			addgroupnode domain \
			groupname="Application Cluster" \
			name="$node" || 
			print "WARNING: addgroupnode failed for node $node"
	done

	GenerateWelcomePage
	PublishServerInfo

	PrintAdminPorts >$LogFileDir/adminports

	Timestamp

	return 0
}

#
# Stop all nodes
#
function Stop
{
	set -e

	CheckInstalled

	Timestamp
	Log "Stopping $ProductName nodes..."
	GetAdminPorts

	for node in $AllNodes
	do
		adminport=$(eval print '$'${node}_adminport)

		$SwitchAdmin adminport=$adminport \
			stop node >>$LogFile 2>&1
	done

	Log "Stop complete"
	Timestamp

	return 0
}

#
# Stop and remove all nodes
#
function Remove
{
	set -e

	CheckInstalled
	Timestamp
	Log "Removing $ProductName nodes..."

	GetAdminPorts

	for node in $AllNodes
	do
		adminport=$(eval print '$'${node}_adminport)

		$SwitchAdmin adminport=$adminport \
			stop node >>$LogFile 2>&1  || :

		$SwitchAdmin remove node \
			installpath=$Run/nodes/$node >>$LogFile 2>&1 ||
			Die "remove: remove node failed for $node"
	done

	rm -rf $Run

	Log "Removal complete"

	return 0
}

#
# Remove and restart all nodes
#
function Restart
{
	set -e

	CheckInstalled
	Remove
	Log "Restarting $ProductName nodes..."
	Start
	Log "Restart complete"

	return 0
}

#
# Display the status of all nodes
#
function Status
{
	set -e

	CheckInstalled
	GetAdminPorts

	typeset adminport
	typeset display
	typeset servicename
	typeset message

	HOSTNAME=$(hostname)
    	print "HOST NAME   : $HOSTNAME : IP address $IP"

	for node in $AllNodes
	do
		adminport=$(eval print '$'${node}_adminport)

		if ! display=$($SwitchAdmin adminport=$adminport \
			username=guest password=guest \
			display node 2>>$LogFile)
		then
			print "NOT RUNNING : $node"
			continue
		fi

		#
		# extract servicename from the display node output
		#
		servicename=$(print $display |
				sed 's|.*Service Name: "\(.*\)".*|\1|' \
				2>>$LogFile)

		print "RUNNING     : $node : adminport $adminport :" \
				"servicename $servicename"
	done

	message=$($SwitchAdmin adminport=$domainmanager_adminport \
		username=guest password=guest display manager |
		grep "Web Server URL") \
		&& print "RUNNING     : $message" \
		|| print "NOT RUNNING : Web Server URL not available"

	return 0
}

#
# validate that the calling script has set all of the required variables
#
function CheckConfiguration
{
	test "$Application" ||
		LogFatal "Variable Application must be set"

	test -d "$SW_HOME/distrib/$Application" ||
		LogFatal "Application $Application not found in $SW_HOME"

	test "${#Node[@]}" -ne 0 ||
		LogFatal "No nodes defined for application $Application"

	return 0
}

function ParseArgs
{
	set -e

	while [ $# -gt 0 ]
	do
		case "$1" in
		-x)
			EnableFunctionTracing
			;;
		install)
			Command=Install
			;;
		start)
			Command=Start
			;;
		stop)
			Command=Stop
			;;
		restart)
			Command=Restart
			;;
		remove)
			Command=Remove
			;;
		status)
			Command=Status
			;;
		getadminports)
			Command=PrintAdminPorts
			;;
		testconfig)
			Command=TestConfig
			;;
		*=*)
			eval $1
			;;
		*)
			Usage
			;;
		esac
		shift
	done

	test "$Command" || Usage

	return 0
}

function InitMain
{
	set -e

	ParseArgs "$@"

	Initialize

	$Command

	return 0
}
